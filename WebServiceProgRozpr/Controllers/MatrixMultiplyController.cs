using Microsoft.AspNetCore.Mvc;using WebServiceProgRozpr.Services;namespace WebServiceProgRozpr.Controllers;[ApiController][Route("Api/[controller]")]public class MatrixMultiplyController(    ILogger<MatrixMultiplyController> logger,    IMatrixMultiplyService matrixMultiplyService) : ControllerBase{    [HttpGet("/Matrix/Filename/{filename}", Name = "Get matrix from file")]    [ProducesResponseType(typeof(float[][]), StatusCodes.Status200OK)]    [ProducesResponseType(StatusCodes.Status400BadRequest)]    [ProducesResponseType(StatusCodes.Status404NotFound)]    [ProducesResponseType(StatusCodes.Status500InternalServerError)]    public ActionResult<float[][]> Get(string filename)    {        if (string.IsNullOrEmpty(filename))        {            logger.LogError("Filename is empty");            return BadRequest("Filename is empty");        }        try        {            logger.LogInformation("Reading matrix from file {filename}", filename);            return new ActionResult<float[][]>(matrixMultiplyService.ReadMatrix(filename));        }        catch (FileNotFoundException e)        {            logger.LogError(e, "File not found");            return NotFound("File not found");        }        catch (ArgumentException e)        {            logger.LogError(e, "File is not a matrix");            return StatusCode(StatusCodes.Status500InternalServerError,                "Error: File is not a matrix.");        }    }    [HttpPost("/Matrix/Upload", Name = "Uploading matrix to server")]    [ProducesResponseType(StatusCodes.Status200OK)]    [ProducesResponseType(StatusCodes.Status400BadRequest)]    [ProducesResponseType(StatusCodes.Status500InternalServerError)]    public ActionResult<string> Upload(float[][] matrix)    {        if (matrix.Length == 0)        {            logger.LogError("Matrix is empty");            return BadRequest("Matrix is empty");        }        try        {            logger.LogInformation("Saving matrix to file");            return matrixMultiplyService.SaveToFile(matrix);        }        catch (Exception e)        {            logger.LogError(e, "Error saving matrix to file");            return StatusCode(StatusCodes.Status500InternalServerError, "Error saving matrix to file");        }    }    [HttpPost("/Matrix/Multiply", Name = "Multiplying matrices")]    [ProducesResponseType(StatusCodes.Status200OK)]    [ProducesResponseType(StatusCodes.Status400BadRequest)]    public ActionResult<string> Multiple(string filename1, string filename2)    {        if (string.IsNullOrEmpty(filename1) || string.IsNullOrEmpty(filename2))        {            return StatusCode(StatusCodes.Status400BadRequest, "Filenames are empty");        }        try        {            logger.LogInformation("Multiplying matrices");            return matrixMultiplyService.Multiply(filename1, filename2);        }        catch (InvalidOperationException e)        {            logger.LogError(e, "Error multiplying matrices");            return StatusCode(StatusCodes.Status500InternalServerError, e.Message);        }    }}